# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Build (archive) the app"
  lane :build do
    begin
      sh("../../scripts/generate-and-write-ios-config")
      sh("../../scripts/start-background-packager")
      create_keychain(name: "temp_code_sign", unlock: true, timeout: false, password: "pwd")
      sync_code_signing(keychain_name: "temp_code_sign", keychain_password: "pwd", readonly: true)
      build_app(project: "XConf.xcodeproj", scheme: "XConf", silent: true)
    ensure
      sh("../../scripts/kill-background-packager")
      delete_keychain(name: "temp_code_sign")
    end
  end

  desc "Push a new build to TestFlight"
  lane :beta do |options|
    build
    upload_to_testflight(testflight_params(options))
    # For the parameters of upload_to_testflight, see:
    # https://docs.fastlane.tools/actions/upload_to_testflight/#parameters
  end
end

def testflight_params(options)
  params = {}

  if options[:raw_args]
    args = parse_raw_args(options[:raw_args])

    params[:changelog] = args['-m'] if args['-m']
  end

  params
end

def parse_raw_args(raw_args)
  command_args = raw_args.split('%%,%%')
  command_args.reduce(last: '', hash: {}) do |acc, arg|
    unless arg.length.zero?
      if acc[:last].start_with?('-') && !arg.start_with?('-')
        key = acc[:last]
        if !acc[:hash][key] || acc[:hash][key].is_a?(TrueClass)
          acc[:hash][key] = arg
        elsif acc[:hash][key].is_a?(Array)
          acc[:hash][key].push(arg)
        else
          acc[:hash][key] = [acc[:hash][key], arg]
        end
      else
        acc[:hash][arg] = true unless acc[:hash][arg]
      end
      acc[:last] = arg
      acc
    end
    acc
  end[:hash]
end

# Override FastlaneCore::PrintTable to prevent actions from printing sensitive data
class FastlaneCore::PrintTable
  class << self
    alias print_values_original print_values
    alias transform_output_original transform_output

    def print_values(params)
      hide_keys = [:git_url]

      if params[:hide_keys].is_a? Array
        params[:hide_keys].concat(hide_keys)
      else
        params[:hide_keys] = hide_keys
      end

      print_values_original(params)
    end

    def transform_output(rows, transform: :newline)
      rows.each { |row| row[1] = '********' if row[0] == :git_url }
      transform_output_original(rows, transform: transform)
    end
  end
end
